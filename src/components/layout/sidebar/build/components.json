[
  {
    "category": "Control",
    "items": [
      {
        "id": "if",
        "name": "If (Condition)",
        "defaultPorts": {
          "executionIn": { "portId": "exec_in", "name": "In", "dataType": "execution", "kind": "execution", "flow": "in" },
          "dataIns": [
            { "portId": "condition", "name": "Condition", "dataType": "boolean", "kind": "data", "flow": "in" }
          ],
          "executionOuts": [
            { "portId": "exec_out_then", "name": "Then", "dataType": "execution", "kind": "execution", "flow": "out", "color": "green" },
            { "portId": "exec_out_else", "name": "Else", "dataType": "execution", "kind": "execution", "flow": "out", "color": "red" }
          ]
        },
        "documentation": "Executes the 'Then' branch if the condition is true, otherwise executes the 'Else' branch. The condition must be a boolean value (true/false)."
      },
      {
        "id": "while",
        "name": "While",
        "defaultPorts": {
          "executionIn": { "portId": "exec_in", "name": "In", "dataType": "execution", "kind": "execution", "flow": "in" },
          "dataIns": [
            { "portId": "condition", "name": "Condition", "dataType": "boolean", "kind": "data", "flow": "in" }
          ],
          "executionOuts": [
            { "portId": "exec_out_loop", "name": "Loop", "dataType": "execution", "kind": "execution", "flow": "out" },
            { "portId": "exec_out_end", "name": "End", "dataType": "execution", "kind": "execution", "flow": "out" }
          ]
        },
        "documentation": "Executes the 'Loop' branch as long as the condition (boolean input) is true. When the condition becomes false, execution continues through the 'End' branch."
      },
      {
        "id": "loop_fixed",
        "name": "Repeat X times",
        "defaultPorts": {
          "executionIn": { "portId": "exec_in", "name": "In", "dataType": "execution", "kind": "execution", "flow": "in" },
          "dataIns": [
            { "portId": "iterations", "name": "Times", "dataType": "number", "kind": "data", "flow": "in" }
          ],
          "executionOuts": [
            { "portId": "exec_out_loop", "name": "Loop", "dataType": "execution", "kind": "execution", "flow": "out" },
            { "portId": "exec_out_end", "name": "End", "dataType": "execution", "kind": "execution", "flow": "out" }
          ]
        },
        "documentation": "Repeats the execution of the 'Loop' branch a number of times specified by the 'Times' input. Execution then continues through the 'End' branch."
      },
      {
        "id": "loop_array_foreach",
        "name": "For Each In Array",
        "defaultPorts": {
          "executionIn": { "portId": "exec_in", "name": "In", "dataType": "execution", "kind": "execution", "flow": "in" },
          "dataIns": [
            { "portId": "array_in", "name": "Array", "dataType": "array", "kind": "data", "flow": "in" }
          ],
          "executionOuts": [
            {
              "portId": "exec_out_loop",
              "name": "Loop (Element)",
              "dataType": "execution",
              "kind": "execution",
              "flow": "out",
              "providesData": [
                { "portId": "element", "name": "Element", "dataType": "any", "kind": "data", "flow": "out" },
                { "portId": "index", "name": "Index", "dataType": "number", "kind": "data", "flow": "out" }
              ]
            },
            { "portId": "exec_out_end", "name": "End", "dataType": "execution", "kind": "execution", "flow": "out" }
          ]
        },
        "documentation": "Iterates over each element in an array. Provides the current element and its index at each iteration of the loop. The 'End' branch executes after all elements have been processed."
      }
    ]
  },
  {
    "category": "Inputs",
    "items": [
      {
        "id": "button_read",
        "name": "Read Pin (Digital)",
        "defaultPorts": {
          "dataOuts": [
            { "portId": "state", "name": "State", "dataType": "boolean", "kind": "data", "flow": "out" }
          ],
          "dataIns": [
            { "portId": "pin", "name": "Pin", "dataType": "number", "kind": "data", "flow": "in" }
          ]
        },
        "documentation": "Reads the state (HIGH or LOW) of a digital pin. Provides a boolean value (true if HIGH, false if LOW)."
      },
      {
        "id": "sensor_read",
        "name": "Read Pin (Analog)",
        "defaultPorts": {
          "dataOuts": [
            { "portId": "value", "name": "Value", "dataType": "number", "kind": "data", "flow": "out" }
          ],
           "dataIns": [
            { "portId": "pin", "name": "Pin", "dataType": "number", "kind": "data", "flow": "in" }
          ]
        },
        "documentation": "Reads the analog value of a pin (typically from 0 to 1023). Provides a numerical value."
      },
      {
        "id": "sensor_digital_read",
        "name": "Read Pin (Digital Direct)",
        "defaultPorts": {
          "dataOuts": [
            { "portId": "value", "name": "Value", "dataType": "boolean", "kind": "data", "flow": "out" }
          ],
          "dataIns": [
            { "portId": "pin", "name": "Pin", "dataType": "number", "kind": "data", "flow": "in" }
          ]
        },
        "documentation": "Reads the direct digital state (HIGH/LOW) of a pin. Similar to 'Read Pin (Digital)' but can be used for specific digital sensors. Provides a boolean value."
      }
    ]
  },
  {
    "category": "Outputs",
    "items": [
      {
        "id": "led_on",
        "name": "Turn Pin On (HIGH)",
        "defaultPorts": {
          "executionIn": { "portId": "exec_in", "name": "In", "dataType": "execution", "kind": "execution", "flow": "in" },
          "executionOuts": [{ "portId": "exec_out", "name": "Out", "dataType": "execution", "kind": "execution", "flow": "out" }],
          "dataIns": [
            { "portId": "pin", "name": "Pin", "dataType": "number", "kind": "data", "flow": "in" }
          ]
        },
        "documentation": "Sets a digital pin to HIGH state (typically to turn on an LED or activate a component)."
      },
      {
        "id": "led_off",
        "name": "Turn Pin Off (LOW)",
        "defaultPorts": {
          "executionIn": { "portId": "exec_in", "name": "In", "dataType": "execution", "kind": "execution", "flow": "in" },
          "executionOuts": [{ "portId": "exec_out", "name": "Out", "dataType": "execution", "kind": "execution", "flow": "out" }],
          "dataIns": [
            { "portId": "pin", "name": "Pin", "dataType": "number", "kind": "data", "flow": "in" }
          ]
        },
        "documentation": "Sets a digital pin to LOW state (typically to turn off an LED or deactivate a component)."
      },
      {
        "id": "set_pin_state",
        "name": "Set Pin State",
        "defaultPorts": {
          "executionIn": { "portId": "exec_in", "name": "In", "dataType": "execution", "kind": "execution", "flow": "in" },
          "executionOuts": [{ "portId": "exec_out", "name": "Out", "dataType": "execution", "kind": "execution", "flow": "out" }],
          "dataIns": [
            { "portId": "pin", "name": "Pin", "dataType": "number", "kind": "data", "flow": "in" },
            { "portId": "state", "name": "State", "dataType": "boolean", "kind": "data", "flow": "in" }
          ]
        },
        "documentation": "Sets the state (HIGH or LOW) of a digital pin based on a boolean input (true for HIGH, false for LOW)."
      },
      {
        "id": "buzzer_play",
        "name": "Play Sound (Buzzer)",
        "defaultPorts": {
          "executionIn": { "portId": "exec_in", "name": "In", "dataType": "execution", "kind": "execution", "flow": "in" },
          "executionOuts": [{ "portId": "exec_out", "name": "Out", "dataType": "execution", "kind": "execution", "flow": "out" }],
          "dataIns": [
            { "portId": "pin", "name": "Pin", "dataType": "number", "kind": "data", "flow": "in" },
            { "portId": "frequency", "name": "Frequency", "dataType": "number", "kind": "data", "flow": "in" },
            { "portId": "duration", "name": "Duration", "dataType": "number", "kind": "data", "flow": "in" }
          ]
        },
        "documentation": "Activates a buzzer connected to a pin, playing a sound at a specified frequency and duration."
      }
    ]
  },
  {
    "category": "Math / Logic",
    "items": [
      {
        "id": "math_operation",
        "name": "Math Operation",
        "defaultPorts": {
          "dataIns": [
            { "portId": "operand_a", "name": "A", "dataType": "number", "kind": "data", "flow": "in" },
            { "portId": "operand_b", "name": "B", "dataType": "number", "kind": "data", "flow": "in" }
          ],
          "dataOuts": [
            { "portId": "result", "name": "Result", "dataType": "number", "kind": "data", "flow": "out" }
          ]
        },
        "documentation": "Performs a mathematical operation (addition, subtraction, etc. - configurable) between two numbers A and B. Provides the result."
      },
      {
        "id": "logic_operation",
        "name": "Logic Operation",
        "defaultPorts": {
          "dataIns": [
            { "portId": "operand_a", "name": "A", "dataType": "boolean", "kind": "data", "flow": "in" },
            { "portId": "operand_b", "name": "B", "dataType": "boolean", "kind": "data", "flow": "in" }
          ],
          "dataOuts": [
            { "portId": "result", "name": "Result", "dataType": "boolean", "kind": "data", "flow": "out" }
          ]
        },
        "configComponent": "LogicOperationConfig",
        "defaultConfig": {
          "operator": "AND",
          "numInputs": 2
        },
        "documentation": "Performs a logical operation (AND, OR, NOT, etc. - configurable). The number of inputs is dynamic for AND, OR, XOR. NOT always has 1 input. Provides the boolean result."
      },
      { "id": "random_number", "name": "Random Number",
        "defaultPorts": {
          "dataIns": [
            { "portId": "min", "name": "Min", "dataType": "number", "kind": "data", "flow": "in" },
            { "portId": "max", "name": "Max", "dataType": "number", "kind": "data", "flow": "in" }
          ],
          "dataOuts": [
            { "portId": "value", "name": "Value", "dataType": "number", "kind": "data", "flow": "out" }
          ]
        },
        "documentation": "Generates a random number between a minimum (Min) and maximum (Max) value, inclusive. Provides the generated number."
      },
      {
        "id": "variable_set",
        "name": "Set Variable",
        "defaultPorts": {
          "executionIn": { "portId": "exec_in", "name": "In", "dataType": "execution", "kind": "execution", "flow": "in" },
          "executionOuts": [{ "portId": "exec_out", "name": "Out", "dataType": "execution", "kind": "execution", "flow": "out" }],
          "dataIns": [
            { "portId": "value_in", "name": "Value", "dataType": "any", "kind": "data", "flow": "in" }
          ]
        },
        "configComponent": "VariableNameConfig",
        "defaultConfig": { "name": "myVariable", "isNew": true, "dataType": "Number"},
        "documentation": "Sets the value of a variable (configurable name and type). The 'Value' input port adapts to the variable's type."
      },
      {
        "id": "variable_get",
        "name": "Get Variable",
        "defaultPorts": {
          "dataOuts": [
            { "portId": "value_out", "name": "Value", "dataType": "any", "kind": "data", "flow": "out" }
          ]
        },
        "configComponent": "VariableNameConfig",
        "defaultConfig": { "name": "myVariable", "dataType": "Number" },
        "documentation": "Reads the value of a variable (configurable name). The 'Value' output port adapts to the variable's type."
      }
    ]
  },
  {
    "category": "Timers",
    "items": [
      {
        "id": "delay",
        "name": "Wait (ms)",
        "defaultPorts": {
          "executionIn": { "portId": "exec_in", "name": "In", "dataType": "execution", "kind": "execution", "flow": "in" },
          "executionOuts": [{ "portId": "exec_out", "name": "Out", "dataType": "execution", "kind": "execution", "flow": "out" }],
          "dataIns": [
            { "portId": "duration", "name": "Duration", "dataType": "number", "kind": "data", "flow": "in" }
          ]
        },
        "documentation": "Pauses program execution for the specified duration in milliseconds. The duration can be configured or provided by a data input."
      },
      {
        "id": "interval_run",
        "name": "Run at Interval",
        "defaultPorts": {
          "executionIn": { "portId": "exec_in", "name": "In", "dataType": "execution", "kind": "execution", "flow": "in" },
          "dataIns": [
            { "portId": "interval", "name": "Interval (ms)", "dataType": "number", "kind": "data", "flow": "in" }
          ],
          "executionOuts": [
            { "portId": "exec_out_tick", "name": "Tick", "dataType": "execution", "kind": "execution", "flow": "out" },
            { "portId": "exec_out_done", "name": "Stopped", "dataType": "execution", "kind": "execution", "flow": "out" }
          ]
        },
        "documentation": "Executes the 'Tick' branch at regular intervals defined by 'Interval (ms)'. The 'Stopped' branch executes if the interval is stopped (advanced functionality)."
      },
      {
        "id": "get_time",
        "name": "Elapsed Time (ms)",
        "defaultPorts": {
          "dataOuts": [
            { "portId": "time_ms", "name": "ms", "dataType": "number", "kind": "data", "flow": "out" }
          ]
        },
        "documentation": "Provides the time elapsed in milliseconds since the Arduino program started (millis() value)."
      }
    ]
  },
  {
    "category": "Constant Values",
    "items": [
      {
        "id": "constant_number",
        "name": "Constant Number",
        "defaultPorts": {
          "dataOuts": [
            { "portId": "value", "name": "Value", "dataType": "number", "kind": "data", "flow": "out" }
          ]
        },
        "documentation": "Provides a constant numerical value. Configure the value in the block settings."
      },
      {
        "id": "constant_string",
        "name": "Constant Text",
        "defaultPorts": {
          "dataOuts": [
            { "portId": "value", "name": "Text", "dataType": "string", "kind": "data", "flow": "out" }
          ]
        },
        "documentation": "Provides a constant string of characters. Configure the text in the block settings."
      },
      {
        "id": "constant_boolean",
        "name": "Constant Boolean",
        "defaultPorts": {
          "dataOuts": [
            { "portId": "value", "name": "State", "dataType": "boolean", "kind": "data", "flow": "out" }
          ]
        },
        "documentation": "Provides a constant boolean value (true or false). Configure the value in the block settings."
      },
      {
        "id": "constant_array",
        "name": "Constant Array",
        "defaultPorts": {
          "dataOuts": [
            { "portId": "value", "name": "Array", "dataType": "array", "kind": "data", "flow": "out" }
          ]
        },
        "documentation": "Provides a constant array. Configure the array elements in the block settings."
      }
    ]
  },
  {
    "category": "Program",
    "items": [
      {
        "id": "program_setup_start",
        "name": "Setup Start",
        "defaultPorts": {
          "executionOuts": [{ "portId": "exec_out_setup", "name": "Setup", "dataType": "execution", "kind": "execution", "flow": "out" }]
        },
        "documentation": "Marks the beginning of the Arduino program's setup section. Code connected here executes once at startup."
      },
      {
        "id": "program_setup_end",
        "name": "Setup End",
        "defaultPorts": {
          "executionIn": { "portId": "exec_in_setup_end", "name": "Setup End In", "dataType": "execution", "kind": "execution", "flow": "in" }
        },
        "documentation": "Marks the end of the setup section. Must be connected after the last setup action."
      },
      {
        "id": "program_loop_start",
        "name": "Loop Start",
        "defaultPorts": {
          "executionOuts": [{ "portId": "exec_out_loop", "name": "Loop", "dataType": "execution", "kind": "execution", "flow": "out" }]
        },
        "documentation": "Marks the beginning of the Arduino program's main loop. Code connected here executes continuously."
      },
      {
        "id": "program_loop_end",
        "name": "Loop End",
        "defaultPorts": {
          "executionIn": { "portId": "exec_in_loop_end", "name": "Loop End In", "dataType": "execution", "kind": "execution", "flow": "in" }
        },
        "documentation": "Marks the end of one iteration of the main loop. Execution then returns to 'Loop Start'."
      }
    ]
  },
  {
    "category": "Functions",
    "items": [
      {
        "id": "function_definition_start",
        "name": "Define Function",
        "defaultPorts": {
          "executionOuts": [
            { 
              "portId": "exec_out_body", 
              "name": "Function Body", 
              "dataType": "execution", 
              "kind": "execution", 
              "flow": "out"
            }
          ]
        },
        "documentation": "Defines the start of a new function. Configure its name and parameters (inputs/outputs) in the block options. The function body is the sequence of blocks connected to its execution output."
      },
      {
        "id": "function_definition_end",
        "name": "End Function",
        "defaultPorts": {
          "executionIn": { 
            "portId": "exec_in_end", 
            "name": "Return", 
            "dataType": "execution", 
            "kind": "execution", 
            "flow": "in" 
          }
        },
        "documentation": "Marks the end of a function definition. Must be connected after the last action in the function body."
      }
    ]
  }
]
